import { jsx as R } from "react/jsx-runtime";
import { useContext as P, useReducer as T, useEffect as S } from "react";
import y from "../../utils/getParams.mjs";
import w from "../../utils/isServer.mjs";
import K from "../activity/ActivityContext.mjs";
import L from "./HistoryContext.mjs";
import { historyReducer as N } from "./store.mjs";
import { HistoryActionType as k } from "./typing.mjs";
import B from "../navigation/NavigationContext.mjs";
import { NavigationStatus as m, NavigationActionType as n } from "../navigation/typing.mjs";
function J({ children: H, initPath: C }) {
  const r = P(K).state.activities.map(({ path: t }) => t), [c, d] = T(
    N,
    {
      index: 0,
      records: []
    },
    () => {
      const t = w() ? C || "/" : window.location.pathname, o = w() ? t.split("?")[1] || "" : window.location.search;
      return {
        index: 0,
        records: [
          {
            type: k.PUSH,
            path: t,
            params: y(r, t, o)
          }
        ]
      };
    }
  ), { dispatch: e } = P(B);
  return S(() => {
    window.history.replaceState({ index: 0 }, "");
  }, []), S(() => {
    const t = (o) => {
      var l, v, x;
      const f = (l = o.state) == null ? void 0 : l.index, p = (v = o.state) == null ? void 0 : v.status, i = ((x = o.state) == null ? void 0 : x.animate) || !0, { pathname: h, search: u } = window.location, s = `${h}${u}`, a = y(r, h, u);
      if (f !== void 0) {
        const A = f < c.index, U = p === m.PUSH, g = p === m.STACK_PUSH, E = p === m.REPLACE;
        A ? e({
          type: n.BACK,
          path: s,
          params: a,
          animate: i
        }) : U ? e({
          type: n.PUSH,
          path: s,
          params: a,
          animate: i
        }) : g ? e({
          type: n.STACK_PUSH,
          path: s,
          params: a,
          animate: i
        }) : E && e({
          type: n.PUSH,
          path: s,
          params: a,
          animate: i
        });
      }
    };
    return window.addEventListener("popstate", t), () => {
      window.removeEventListener("popstate", t);
    };
  }, [r, c.index, d, e]), /* @__PURE__ */ R(L.Provider, { value: { state: c, dispatch: d }, children: H });
}
export {
  J as default
};
