import { useContext as P } from "react";
import { d as p } from "../vendor-BPaWSzH4.mjs";
import g from "../activity/ActivityContext.mjs";
import w from "../history/HistoryContext.mjs";
import x from "./NavigationContext.mjs";
import { NavigationActionType as d, NavigationStatus as b } from "./typing.mjs";
function T() {
  const { state: f } = P(g), {
    state: { index: u }
  } = P(w), { dispatch: h } = P(x);
  return {
    push: (y, m = {}, { animate: n } = { animate: !0 }) => {
      var c;
      const s = f.activities.find((t) => t.name === y);
      if (!s) return;
      const r = Object.fromEntries(
        Object.entries(m).map(([t, o]) => [t, String(o)])
      );
      let e = p.compile(s.path)(r);
      const a = p.match(s.path)(e), l = a ? Object.keys(a == null ? void 0 : a.params) : [], S = { ...r };
      l.forEach((t) => {
        delete r[t];
      });
      const i = new URLSearchParams(
        Object.entries(r).map(([t, o]) => [t, String(o)])
      ).toString();
      e = i ? `${e}?${i}` : e, window.history.pushState(
        {
          index: u + 1,
          status: b.PUSH,
          scrollTop: ((c = window.scrollContainer) == null ? void 0 : c.scrollTop) || 0,
          animate: n
        },
        "",
        e
      ), h({
        type: d.PUSH,
        path: e,
        params: S,
        animate: n
      });
    },
    stackPush: (y, m = {}, { animate: n } = { animate: !0 }) => {
      var c;
      const s = f.currentActivity;
      if (!s) return;
      const r = Object.fromEntries(
        Object.entries(m).map(([t, o]) => [t, String(o)])
      );
      let e = p.compile(s.path)({
        ...s.params,
        ...r
      });
      const a = p.match(s.path)(e), l = a ? Object.keys(a == null ? void 0 : a.params) : [], S = a ? { ...a == null ? void 0 : a.params, ...m } : m;
      l.forEach((t) => {
        delete r[t];
      });
      const i = new URLSearchParams(
        Object.entries(r).map(([t, o]) => [t, String(o)])
      ).toString();
      e = i ? `${e}?${i}` : e, window.history.pushState(
        {
          index: u + 1,
          status: b.STACK_PUSH,
          scrollTop: ((c = window.scrollContainer) == null ? void 0 : c.scrollTop) || 0,
          animate: n
        },
        "",
        e
      ), h({
        type: d.STACK_PUSH,
        path: e,
        params: S,
        animate: n
      });
    },
    replace: (y, m = {}, { animate: n } = { animate: !0 }) => {
      var c;
      const s = f.activities.find((t) => t.name === y);
      if (!s) return;
      const r = Object.fromEntries(
        Object.entries(m).map(([t, o]) => [t, String(o)])
      );
      let e = p.compile(s.path)(r);
      const a = p.match(s.path)(e), l = a ? Object.keys(a == null ? void 0 : a.params) : [], S = { ...r };
      l.forEach((t) => {
        delete r[t];
      });
      const i = new URLSearchParams(
        Object.entries(r).map(([t, o]) => [t, String(o)])
      ).toString();
      e = i ? `${e}?${i}` : e, window.history.replaceState(
        {
          index: u,
          status: b.REPLACE,
          scrollTop: ((c = window.scrollContainer) == null ? void 0 : c.scrollTop) || 0,
          animate: n
        },
        "",
        e
      ), h({
        type: d.REPLACE,
        path: e,
        params: S,
        animate: n
      });
    },
    back: () => {
      window.history.back(), h({
        type: d.BACK_START
      });
    }
  };
}
export {
  T as default
};
