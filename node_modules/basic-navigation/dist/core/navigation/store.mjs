import { NavigationActionType as s, NavigationStatus as t } from "./typing.mjs";
function r(e, n) {
  switch (n.type) {
    case s.PUSH:
      return {
        status: t.PUSH,
        events: e.events.concat({
          status: t.PUSH,
          path: n.path,
          params: n.params,
          recordedAt: Date.now(),
          animate: n.animate
        })
      };
    case s.STACK_PUSH:
      return {
        status: t.PUSH,
        events: e.events.concat({
          status: t.STACK_PUSH,
          path: n.path,
          params: n.params,
          recordedAt: Date.now(),
          animate: n.animate
        })
      };
    case s.REPLACE:
      return {
        status: t.REPLACE,
        events: e.events.concat({
          status: t.REPLACE,
          path: n.path,
          params: n.params,
          recordedAt: Date.now(),
          animate: n.animate
        })
      };
    case s.BACK:
      return {
        status: t.BACK,
        events: e.events.concat({
          status: t.BACK,
          path: n.path,
          params: n.params,
          recordedAt: Date.now(),
          animate: n.animate
        })
      };
    case s.BACK_START:
      return {
        status: t.BACK_START,
        events: e.events
      };
    case s.READY:
      return {
        status: t.READY,
        events: e.events
      };
    case s.PUSH_NAVIGATING:
      return {
        status: t.PUSH_NAVIGATING,
        events: e.events.slice(0, e.events.length - 1)
      };
    case s.STACK_PUSH_NAVIGATING:
      return {
        status: t.STACK_PUSH_NAVIGATING,
        events: e.events.slice(0, e.events.length - 1)
      };
    case s.REPLACE_NAVIGATING:
      return {
        status: t.REPLACE_NAVIGATING,
        events: e.events.slice(0, e.events.length - 1)
      };
    case s.BACK_NAVIGATING:
      return {
        status: t.BACK_NAVIGATING,
        events: e.events
      };
    case s.PUSH_DONE:
      return {
        status: t.PUSH_DONE,
        events: e.events
      };
    case s.STACK_PUSH_DONE:
      return {
        status: t.STACK_PUSH_DONE,
        events: e.events
      };
    case s.REPLACE_DONE:
      return {
        status: t.REPLACE_DONE,
        events: e.events
      };
    case s.BACK_DONE:
      return {
        status: t.BACK_DONE,
        events: e.events.slice(0, e.events.length - 1)
      };
    default:
      return e;
  }
}
export {
  r as navigationReducer
};
