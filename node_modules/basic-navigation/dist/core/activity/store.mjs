import { d as c } from "../vendor-BPaWSzH4.mjs";
import { ActivityActionType as a } from "./typing.mjs";
function A(t, i) {
  switch (i.type) {
    case a.UPDATE_CURRENT_ACTIVITY: {
      const [r] = t.activities.filter((e) => {
        const [p] = i.path.split("?");
        return c.pathToRegexp(e.path).regexp.test(p);
      }).map((e) => ({
        ...e,
        params: i.params,
        activePath: i.path,
        animate: i.animate
      }));
      return {
        activities: t.activities,
        previousActivity: t.currentActivity,
        currentActivity: r
      };
    }
    case a.UPDATE_PREVIOUS_ACTIVITY: {
      const [r] = t.activities.filter((e) => {
        const [p] = i.path.split("?");
        return c.pathToRegexp(e.path).regexp.test(p);
      }).map((e) => ({
        ...e,
        params: i.params,
        activePath: i.path,
        animate: i.animate
      }));
      return {
        activities: t.activities,
        previousActivity: r,
        currentActivity: t.previousActivity
      };
    }
    case a.UPDATE_SPECIFY_PREVIOUS_ACTIVITY: {
      const [r] = t.activities.filter((e) => {
        const [p] = i.path.split("?");
        return c.pathToRegexp(e.path).regexp.test(p);
      }).map((e) => ({
        ...e,
        params: i.params,
        activePath: i.path,
        animate: i.animate
      }));
      return {
        activities: t.activities,
        previousActivity: r,
        currentActivity: t.currentActivity
      };
    }
    case a.UPDATE_WAITING_ACTIVITY:
      return {
        activities: t.activities,
        previousActivity: t.previousActivity,
        currentActivity: t.currentActivity,
        waitingActivity: t.currentActivity
      };
    default:
      return t;
  }
}
export {
  A as activityReducer
};
